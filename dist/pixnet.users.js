// Generated by CoffeeScript 1.9.3
(function() {
  var PixUsers;

  PixUsers = (function() {
    function PixUsers() {}

    PixUsers.prototype.getAccount = function(callback, optionData) {
      var options;
      options = {
        'callback': callback,
        'optionData': optionData,
        'mainUri': 'account'
      };
      pixnet.getAuthApiFunc(this, this.getAccount, arguments, options);
      return this;
    };

    PixUsers.prototype.updateAccount = function(callback, password, optionData) {
      var data, options;
      if (password == null) {
        password = '';
      }
      data = {
        password: password
      };
      data = pixnet._extends(data, optionData);
      options = {
        'callback': callback,
        'optionData': data,
        'mainUri': 'account/info'
      };
      pixnet.postAuthApiFunc(this, this.updateAccount, arguments, options);
      return this;
    };

    PixUsers.prototype.updatePassword = function(callback, pwd, newPwd, optionData) {
      var data, options;
      if (!pwd || !newPwd) {
        pixnet._error('need password arguments');
        return this;
      }
      data = {
        password: pwd,
        new_password: newPwd
      };
      data = pixnet._extends(data, optionData);
      options = {
        'callback': callback,
        'optionData': data,
        'mainUri': 'account/password'
      };
      pixnet.postAuthApiFunc(this, this.updatePassword, arguments, options);
      return this;
    };

    PixUsers.prototype.getUser = function(callback, userName, optionData) {
      var data;
      data = {};
      data = pixnet._extends(data, optionData);
      pixnet._get("https://emma.pixnet.cc/users/" + userName, pixnet._defaultXHROptions(data, callback));
      return this;
    };

    PixUsers.prototype.getAnalyticsData = function(callback, optionData) {
      var options;
      options = {
        'callback': callback,
        'optionData': optionData,
        'mainUri': 'account/analytics'
      };
      pixnet.getAuthApiFunc(this, this.getAnalyticsData, arguments, options);
      return this;
    };

    PixUsers.prototype.getNotifications = function(callback, optionData) {
      var options;
      options = {
        'callback': callback,
        'optionData': optionData,
        'mainUri': 'account/notifications'
      };
      pixnet.getAuthApiFunc(this, this.getNotifications, arguments, options);
      return this;
    };

    PixUsers.prototype.makeNotificationRead = function(callback, id, optionData) {
      var options;
      options = {
        'callback': callback,
        'optionData': optionData,
        'mainUri': "account/notifications/" + id + "/read"
      };
      pixnet.postAuthApiFunc(this, this.makeNotificationRead, arguments, options);
      return this;
    };

    PixUsers.prototype.createMIBAccount = function(callback, needData, optionData) {
      var backIndex, backLen, frontIndex, frontLen, options;
      if (!needData || !needData.id_number || !needData.email || !needData.cellphone || !needData.mail_address || !needData.domicile || needData.enable_video_ad === void 0 || !needData.name || !needData.id_image_front || !needData.id_image_back) {
        return pixnet._error('Do not give needed data');
      }
      needData = pixnet._extends(needData, optionData);
      if (needData.upload_method === "base64") {
        frontLen = needData.id_image_front.length;
        backLen = needData.id_image_back.length;
        frontIndex = needData.id_image_front.indexOf(';base64,');
        backIndex = needData.id_image_back.indexOf(';base64,');
        if (frontIndex > 0) {
          needData.id_image_front = needData.id_image_front.substring(frontIndex + 8, frontLen);
        }
        if (backIndex > 0) {
          needData.id_image_back = needData.id_image_back.substring(backIndex + 8, backLen);
        }
      }
      options = {
        'callback': callback,
        'optionData': needData,
        'mainUri': 'account/mib'
      };
      pixnet.postAuthApiFunc(this, this.createMIBAccount, arguments, options);
      return this;
    };

    PixUsers.prototype.getMIBAccount = function(callback, optionData) {
      var options;
      options = {
        'callback': callback,
        'optionData': optionData,
        'mainUri': 'account/mib'
      };
      pixnet.getAuthApiFunc(this, this.getMIBAccount, arguments, options);
      return this;
    };

    PixUsers.prototype.getMIBPositionData = function(callback, id, optionData) {
      var options;
      if (id === void 0) {
        return pixnet._error('Do not give position id');
      }
      options = {
        'callback': callback,
        'optionData': optionData,
        'mainUri': "account/mib/positions/" + id
      };
      pixnet.getAuthApiFunc(this, this.getMIBPositionData, arguments, options);
      return this;
    };

    PixUsers.prototype.updateMIBPositionData = function(callback, id, fixedadbox, enabled, optionData) {
      var data, options;
      if (id === void 0 || (fixedadbox === void 0 && enabled === void 0)) {
        return pixnet._error('Do not give need params');
      }
      data = {};
      if (0 === fixedadbox || 1 === fixedadbox) {
        data.fixedadbox = fixedadbox;
      }
      if (0 === enabled || 1 === enabled) {
        data.enabled = enabled;
      }
      data = pixnet._extends(data, optionData);
      options = {
        'callback': callback,
        'optionData': data,
        'mainUri': "account/mib/positions/" + id
      };
      pixnet.postAuthApiFunc(this, this.updateMIBPositionData, arguments, options);
      return this;
    };

    PixUsers.prototype.getMIBPay = function(callback, optionData) {
      var options;
      options = {
        'callback': callback,
        'optionData': optionData,
        'mainUri': 'account/mibpay'
      };
      pixnet.getAuthApiFunc(this, this.getMIBPay, arguments, options);
      return this;
    };

    return PixUsers;

  })();

  pixnet.users = new PixUsers();

}).call(this);
